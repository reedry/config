# vim:ft=vim

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
if executable('rls')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'rls',
      \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
      \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
      \ 'whitelist': ['rust'],
      \ })
endif

if executable('pyls')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'pyls',
      \ 'cmd': {server_info->['pyls']},
      \ 'whitelist': ['python'],
      \ })
endif

if executable('ccls')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'ccls',
    \ 'cmd': {server_info->['ccls']},
    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
    \ 'initialization_options': {'cache':{'directory': '/tmp/ccls/cache' }},
    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
    \ })
endif

if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'typescript-language-server',
      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
      \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
      \ 'whitelist': ['typescript', 'typescript.tsx', 'typescriptreact'],
      \ })
endif

if executable('elm-language-server')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'elm-language-server',
      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'elm-language-server --stdio']},
      \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(),'elm.json'))},
      \ 'initialization_options': {
      \   'elmPath': 'elm',
      \   'elmFormatPath': 'elm-format',
      \   'elmTestPath': 'elm-test'
      \ },
      \ 'whitelist': ['elm'],
      \ })
endif

if executable('ocamllsp')
  au User lsp_setup call lsp#register_server({
      \ 'name': 'ocamllsp',
      \ 'cmd': {server_info->[&shell, &shellcmdflag, 'opam exec -- ocamllsp']},
      \ 'whitelist': ['ocaml'],
      \ })
endif

let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼', 'icon': '/path/to/some/icon'}
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
set completeopt+=preview
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
hook_add = '''
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
      \ 'name': 'neosnippet',
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
      \ 'name': 'file',
      \ 'whitelist': ['*'],
      \ 'priority': 10,
      \ 'completor': function('asyncomplete#sources#file#completor')
      \ }))
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
      \ '_' : {
      \   'runner' : 'vimproc',
      \   'runner/vimproc/updatetime' : 60,
      \   'outputter' : 'error',
      \   'outputter/error/success' : 'buffer',
      \   'outputter/error/error' : 'quickfix',
      \   'outputter/buffer/split' : ':rightbelow 8sp',
      \   'outputter/buffer/close_on_empty' : 1,
      \   'outputter/buffer/append' : 1,
      \ },
      \}
au FileType qf nnoremap <silent><buffer>q :quit<CR>
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_disable_lsp = 1
let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_enter = 0
let g:ale_fix_on_save = 1
let g:ale_open_list = 1
let g:ale_linters_explicit = 1
let g:ale_linters = {
  \ 'python': ['pyflakes'],
  \ 'javascript': ['eslint'],
  \ 'typescript': ['eslint'],
  \ 'typescriptreact': ['eslint'],
  \ }
let g:ale_fixers = {
  \ 'python': ['autopep8'],
  \ 'rust': ['rustfmt'],
  \ 'html': ['prettier'],
  \ 'javascript': ['prettier'],
  \ 'json': ['prettier'],
  \ 'typescript': ['prettier'],
  \ 'typescriptreact': ['prettier'],
  \ }
'''

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'itchyny/vim-cursorword'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
source ~/dev/config/vim/lightline.rc.vim
'''

[[plugins]]
repo = 'chriskempson/base16-vim'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
imap <C-s>     <Plug>(neosnippet_expand_or_jump)
smap <C-s>     <Plug>(neosnippet_expand_or_jump)
xmap <C-s>     <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'sheerun/vim-polyglot'
